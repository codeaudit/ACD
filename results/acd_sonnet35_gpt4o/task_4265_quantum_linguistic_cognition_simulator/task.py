import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        tasks = [
            {
                "quantum_principle": "superposition",
                "linguistic_feature": "syntax",
                "cognitive_process": "working memory",
                "languages": ["Mandarin", "Arabic", "Swahili"]
            },
            {
                "quantum_principle": "entanglement",
                "linguistic_feature": "semantics",
                "cognitive_process": "attention",
                "languages": ["Hindi", "Russian", "Quechua"]
            }
        ]
        return {str(i+1): task for i, task in enumerate(random.sample(tasks, k=2))}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a quantum computing system that simulates and analyzes the cognitive processes involved in multilingual language acquisition and use. Your system should incorporate the following elements:

Quantum principle: {t['quantum_principle']}
Linguistic feature: {t['linguistic_feature']}
Cognitive process: {t['cognitive_process']}
Languages: {', '.join(t['languages'])}

Your response should include the following sections, with the specified word counts:

1. Quantum-Linguistic Framework (300-350 words):
   a) Describe the overall architecture of your quantum computing system for simulating linguistic cognition.
   b) Explain how the specified quantum principle is utilized to model language processing.
   c) Detail how your system represents and manipulates the given linguistic feature.
   d) Discuss how the cognitive process is integrated into your quantum-linguistic model.

2. Multilingual Integration (250-300 words):
   a) Explain how your system models the simultaneous processing of the specified languages.
   b) Describe any unique challenges posed by the combination of languages and how your system addresses them.
   c) Discuss how your system accounts for cross-linguistic influence and transfer.

3. Simulation Process (200-250 words):
   a) Outline the step-by-step process of how your system simulates language acquisition and use.
   b) Explain how the quantum computations map to cognitive linguistic processes.
   c) Describe how your system handles the dynamic nature of language processing.

4. Theoretical Foundations (200-250 words):
   a) Provide the theoretical basis for using quantum computing in modeling linguistic cognition.
   b) Explain how your approach advances current understanding in cognitive linguistics and quantum cognition.
   c) Discuss any novel hypotheses generated by your model.

5. Potential Applications (150-200 words):
   a) Propose two innovative applications of your quantum linguistic cognition simulator.
   b) Explain how these applications could benefit fields such as education, translation, or cognitive therapy.

6. Ethical Considerations (100-150 words):
   a) Discuss the ethical implications of simulating human cognitive processes with quantum computing.
   b) Address potential concerns regarding privacy, cognitive manipulation, or cultural bias.

7. Future Research Directions (150-200 words):
   a) Suggest two potential improvements or extensions to your system.
   b) Propose an experiment to test the validity of your quantum-linguistic model against human performance.

8. Case Study (200-250 words):
   Provide a concrete example of how your system would process a specific linguistic task across the given languages, demonstrating the integration of the quantum principle, linguistic feature, and cognitive process.

Ensure your response demonstrates a deep understanding of quantum computing, linguistics, and cognitive science. Use appropriate technical terminology and provide clear explanations for complex concepts. Be creative and innovative in your approach while maintaining scientific plausibility.

Format your response with clear headings for each section, numbered as above. Use subheadings (a, b, c) where applicable. Your total response should be between 1550-1950 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response demonstrates a deep understanding of quantum computing, linguistics, and cognitive science, using appropriate technical terminology.",
            f"The proposed system effectively integrates the specified quantum principle ({t['quantum_principle']}), linguistic feature ({t['linguistic_feature']}), cognitive process ({t['cognitive_process']}), and languages ({', '.join(t['languages'])}).",
            "The quantum-linguistic framework is clearly explained, innovative, and scientifically plausible.",
            "The multilingual integration aspect is well-addressed, considering the unique challenges of the specified languages.",
            "The simulation process is logically described and aligns with current understanding of cognitive linguistics.",
            "The theoretical foundations are sound and advance current understanding in the field.",
            "The proposed applications are innovative and demonstrate practical relevance.",
            "Ethical considerations are thoughtfully addressed, covering privacy, cognitive manipulation, and cultural bias.",
            "Future research directions are insightful and include a valid experimental proposal.",
            "The case study effectively demonstrates the system's functionality across the given languages.",
            "The response is well-structured, coherent, and adheres to the specified word limits for each section."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
