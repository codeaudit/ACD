import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        tasks = [
            {
                "quantum_principle": "superposition",
                "musical_tradition": "Western classical",
                "compositional_focus": "harmonic progression"
            },
            {
                "quantum_principle": "entanglement",
                "musical_tradition": "Indian classical",
                "compositional_focus": "rhythmic patterns"
            },
            {
                "quantum_principle": "quantum tunneling",
                "musical_tradition": "West African",
                "compositional_focus": "polyrhythmic structures"
            }
        ]
        return {str(i+1): task for i, task in enumerate(random.sample(tasks, 2))}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a quantum-inspired AI system for musical composition that integrates the quantum principle of {t['quantum_principle']} with {t['musical_tradition']} music theory, focusing on {t['compositional_focus']}. Your response should include:

1. Quantum-Musical System Architecture (300-350 words):
   a) Describe the key components of your AI system and how they interact.
   b) Explain how you incorporate {t['quantum_principle']} into your system's design.
   c) Detail how your system processes and generates musical elements, focusing on {t['compositional_focus']}.
   d) Discuss how your system integrates principles from {t['musical_tradition']} music theory.
   e) Include a high-level diagram or pseudocode snippet illustrating a crucial part of your architecture.

2. Quantum-Musical Mapping (250-300 words):
   a) Explain how your system maps quantum states or processes to musical elements.
   b) Describe how you account for the unique characteristics of {t['musical_tradition']} in this mapping.
   c) Discuss how your approach to {t['compositional_focus']} is enhanced by quantum principles.

3. Composition Process (200-250 words):
   a) Provide a step-by-step explanation of how your system composes a piece of music.
   b) Describe how your system ensures musical coherence and adherence to {t['musical_tradition']} principles.
   c) Explain how {t['quantum_principle']} influences the compositional choices.

4. Example Composition (150-200 words):
   a) Describe a specific musical piece generated by your system.
   b) Explain how this piece demonstrates the integration of {t['quantum_principle']} and {t['musical_tradition']} principles.
   c) Analyze how the composition showcases your system's approach to {t['compositional_focus']}.

5. Cultural and Aesthetic Considerations (200-250 words):
   a) Discuss how your system preserves or reinterprets cultural elements of {t['musical_tradition']}.
   b) Analyze potential aesthetic implications of using quantum-inspired processes in music composition.
   c) Consider how audiences from different cultural backgrounds might perceive the generated music.

6. Evaluation and Iteration (150-200 words):
   a) Propose methods to evaluate the quality and authenticity of the generated compositions.
   b) Describe how your system could learn and improve its compositional skills over time.
   c) Suggest how feedback from musicians and listeners could be incorporated into the system.

7. Challenges and Future Directions (150-200 words):
   a) Identify key technical or conceptual challenges in implementing your system.
   b) Propose two potential applications of your quantum-musical AI beyond composition.
   c) Suggest areas for future research or expansion of your system.

Ensure your response demonstrates a deep understanding of quantum computing principles, music theory, and cultural musicology. Be innovative in your approach while maintaining scientific and artistic plausibility. Use appropriate technical terminology from each field and provide clear explanations for complex concepts.

Format your response with clear headings for each section, numbered as above. Your total response should be between 1400-1750 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response demonstrates a deep understanding of {t['quantum_principle']} and how it can be applied to music composition",
            f"The system design effectively integrates principles from {t['musical_tradition']} music theory, particularly in handling {t['compositional_focus']}",
            "The quantum-musical mapping is clearly explained and conceptually sound",
            "The composition process is well-defined and incorporates both quantum and musical elements coherently",
            "The example composition demonstrates a clear integration of quantum principles and musical tradition",
            "Cultural and aesthetic considerations are thoughtfully addressed, showing an understanding of {t['musical_tradition']}",
            "The proposed evaluation methods and future directions are insightful and relevant to both quantum computing and musicology"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
