import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        source_domains = [
            "Ecosystem dynamics",
            "Fluid mechanics",
            "Social network theory",
            "Quantum entanglement"
        ]
        target_problems = [
            "Optimizing urban transportation systems",
            "Designing resilient cybersecurity protocols",
            "Developing sustainable energy distribution networks",
            "Creating adaptive learning algorithms for AI"
        ]
        tasks = {}
        for i in range(1, 3):
            source = random.choice(source_domains)
            target = random.choice(target_problems)
            tasks[str(i)] = {"source_domain": source, "target_problem": target}
        return tasks

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"Design an AI system that uses analogical reasoning to solve complex, interdisciplinary problems. Then, apply your system to draw an analogy between the source domain of {t['source_domain']} and the target problem of {t['target_problem']}. Your response should include the following sections:\n\n1. AI System Architecture (250-300 words):\n   a) Describe the key components of your AI system for analogical reasoning.\n   b) Explain how your system identifies and maps structural similarities between domains.\n   c) Discuss any novel elements in your design that enable creative problem-solving through analogy.\n\n2. Analogical Reasoning Process (200-250 words):\n   a) Explain how your system represents knowledge from different domains.\n   b) Describe the mechanisms for identifying relevant analogies.\n   c) Discuss how your model evaluates and refines potential analogical mappings.\n\n3. Application to the Given Scenario (250-300 words):\n   a) Analyze the key principles and structures in the source domain of {t['source_domain']}.\n   b) Identify potential analogical mappings to the target problem of {t['target_problem']}.\n   c) Explain how these mappings could lead to novel solutions or insights for the target problem.\n   d) Provide at least two specific examples of how concepts from the source domain could be applied to the target problem.\n\n4. Evaluation and Refinement (150-200 words):\n   a) Propose methods to evaluate the effectiveness and novelty of the analogical solutions generated by your system.\n   b) Discuss how your system might refine and improve its analogical reasoning over time.\n   c) Consider potential limitations or biases in your approach.\n\n5. Broader Implications (150-200 words):\n   a) Discuss the potential impact of your analogical reasoning AI system on scientific discovery and innovation.\n   b) Explore how this approach might change problem-solving methodologies across different fields.\n   c) Consider any ethical implications or challenges that might arise from using AI for analogical reasoning in complex problem-solving.\n\nEnsure your response demonstrates a deep understanding of cognitive science, artificial intelligence, and the specific domains involved in the analogy. Be creative in your approach while maintaining scientific and technological plausibility. Use appropriate technical terminology and provide clear explanations for complex concepts.\n\nFormat your response using clear headings for each section, adhering to the specified word limits. Your total response should be between 1000-1250 words."

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response demonstrates a deep understanding of analogical reasoning and AI system design",
            "The proposed AI system architecture is innovative and plausible",
            "The application of the analogy between the source domain and target problem is creative and well-reasoned",
            "The evaluation and refinement methods are thoughtfully considered",
            "The discussion of broader implications is insightful and comprehensive"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
