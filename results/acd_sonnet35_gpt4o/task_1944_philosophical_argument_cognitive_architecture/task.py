import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        philosophical_topics = [
            {
                "topic": "free will",
                "related_concepts": ["determinism", "moral responsibility", "consciousness"],
                "key_philosophers": ["Kant", "Hume", "Dennett"]
            },
            {
                "topic": "mind-body problem",
                "related_concepts": ["dualism", "materialism", "qualia"],
                "key_philosophers": ["Descartes", "Chalmers", "Nagel"]
            }
        ]
        return {
            "1": random.choice(philosophical_topics),
            "2": random.choice(philosophical_topics)
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a cognitive architecture capable of processing and generating abstract philosophical arguments about {t['topic']}. Your architecture should integrate principles from cognitive science, AI, linguistics, and philosophy. Your response should include the following sections:

1. Architectural Overview (250-300 words):
   a) Describe the key components of your cognitive architecture.
   b) Explain how these components interact to process and generate philosophical arguments.
   c) Discuss how your architecture incorporates principles from cognitive science and AI.
   d) Provide a visual representation (described in words) of your architecture's structure.

2. Knowledge Representation (200-250 words):
   a) Explain how your architecture represents philosophical concepts and arguments.
   b) Describe how it encodes and organizes knowledge about {t['topic']} and {', '.join(t['related_concepts'])}.
   c) Discuss how your representation scheme allows for abstract reasoning and argument generation.

3. Reasoning Mechanisms (250-300 words):
   a) Detail the reasoning processes your architecture uses to analyze and generate arguments.
   b) Explain how it handles logical inference, analogy, and other forms of philosophical reasoning.
   c) Describe how your architecture deals with uncertainty and conflicting viewpoints.
   d) Discuss how it incorporates ideas from key philosophers like {', '.join(t['key_philosophers'])}.

4. Language Processing (200-250 words):
   a) Explain how your architecture processes natural language inputs related to philosophical arguments.
   b) Describe the mechanism for generating coherent and persuasive philosophical texts.
   c) Discuss how linguistic structure and semantic content are integrated in your system.

5. Learning and Adaptation (150-200 words):
   a) Describe how your architecture learns from new philosophical arguments or information.
   b) Explain how it adapts its reasoning strategies based on feedback or counter-arguments.
   c) Discuss potential mechanisms for creative insight or novel argument generation.

6. Evaluation and Validation (150-200 words):
   a) Propose methods to evaluate the quality and coherence of arguments generated by your architecture.
   b) Describe how you would validate the system's understanding of philosophical concepts.
   c) Discuss potential benchmarks or tests for assessing the architecture's performance.

7. Ethical Considerations and Limitations (150-200 words):
   a) Discuss ethical implications of an AI system capable of philosophical reasoning.
   b) Address potential biases or limitations in your architecture's approach to philosophy.
   c) Suggest safeguards or guidelines for responsible use of such a system.

Ensure your response demonstrates a deep understanding of cognitive architectures, philosophical reasoning, and natural language processing. Use appropriate terminology from all relevant fields and provide clear explanations where necessary. Be innovative in your approach while maintaining scientific plausibility.

Your total response should be between 1350-1700 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response demonstrates a deep understanding of cognitive architectures, philosophical reasoning, and natural language processing.",
            "The proposed architecture integrates principles from cognitive science, AI, linguistics, and philosophy in a coherent and innovative manner.",
            "The design includes clear explanations of knowledge representation, reasoning mechanisms, and language processing components.",
            "The architecture's ability to handle abstract concepts and generate philosophical arguments is well-described and plausible.",
            "The response addresses learning, adaptation, evaluation, and ethical considerations comprehensively.",
            "The overall design is creative, scientifically plausible, and demonstrates interdisciplinary knowledge integration."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
