import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        writing_system_types = [
            "pictographic",
            "logographic",
            "syllabic",
            "alphabetic",
            "abjad",
            "abugida"
        ]
        linguistic_features = [
            "tonal language",
            "agglutinative morphology",
            "subject-object-verb word order",
            "ergative-absolutive alignment",
            "extensive case system",
            "phonemic distinction between aspirated and unaspirated consonants"
        ]
        return {
            "1": {"start_system": random.choice(writing_system_types), "end_system": random.choice(writing_system_types), "feature": random.choice(linguistic_features)},
            "2": {"start_system": random.choice(writing_system_types), "end_system": random.choice(writing_system_types), "feature": random.choice(linguistic_features)}
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system that simulates the evolution of writing systems, specifically from a {t['start_system']} system to an {t['end_system']} system, for a language with the following feature: {t['feature']}. Then, use your system to generate a hypothetical writing system evolution. Your response should include:

1. AI System Architecture (300-350 words):
   a) Describe the overall structure of your AI system for simulating writing system evolution.
   b) Explain how your system models linguistic features and writing system characteristics.
   c) Detail the key components and their interactions within the system.
   d) Discuss how your system incorporates principles from historical linguistics and writing system development.

2. Evolutionary Process Simulation (250-300 words):
   a) Outline the step-by-step process your AI uses to simulate writing system evolution.
   b) Explain how your system handles the transition between different types of writing systems.
   c) Describe how the specified linguistic feature influences the evolutionary process in your simulation.
   d) Discuss any challenges in modeling this evolution and how your system addresses them.

3. Generated Writing System Evolution (300-350 words):
   a) Present a hypothetical evolution of a writing system generated by your AI, from the specified start to end system.
   b) Provide examples of symbols or characters at key stages of this evolution, explaining their development.
   c) Describe how the specified linguistic feature is reflected in the evolved writing system.
   d) Explain the rationale behind key evolutionary changes in your generated system.

4. Evaluation and Validation (200-250 words):
   a) Propose methods for evaluating the plausibility and linguistic validity of your AI-generated writing system evolution.
   b) Discuss how your system's output could be compared to real historical writing system evolutions.
   c) Suggest ways to validate that the evolved system adequately represents the specified linguistic feature.

5. Implications and Applications (200-250 words):
   a) Discuss the potential implications of your AI system for our understanding of linguistic evolution and writing system development.
   b) Explore possible applications of your system in fields such as historical linguistics, anthropology, or language education.
   c) Propose an extension of your system that could contribute to the study or preservation of endangered writing systems.

Ensure your response demonstrates a deep understanding of historical linguistics, writing system evolution, and AI principles. Be creative in your approach while maintaining scientific and linguistic plausibility. Use appropriate terminology from both linguistics and AI fields, providing clear explanations for complex concepts.

Format your response with clear headings for each section. Your total response should be between 1250-1500 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response should describe an AI system that plausibly simulates the evolution from a {t['start_system']} writing system to an {t['end_system']} system.",
            f"The generated writing system evolution should reflect the specified linguistic feature: {t['feature']}.",
            "The AI system design should demonstrate a deep understanding of both historical linguistics and AI principles.",
            "The response should include all five requested sections with appropriate depth and detail.",
            "The generated writing system evolution should be creative yet linguistically plausible."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
