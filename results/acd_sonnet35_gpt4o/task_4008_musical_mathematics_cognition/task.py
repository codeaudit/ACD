import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        musical_elements = ['rhythm', 'harmony', 'melody', 'timbre']
        cognitive_processes = ['pattern recognition', 'emotional response', 'memory formation', 'attention']
        tasks = {}
        for i in range(1, 3):
            tasks[str(i)] = {
                'musical_element': random.choice(musical_elements),
                'cognitive_process': random.choice(cognitive_processes)
            }
        return tasks

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"Design a mathematical system for representing and analyzing {t['musical_element']} in music, then use it to explore the cognitive process of {t['cognitive_process']} in music perception and creativity. Your response should include:\n\n1. Mathematical Representation (250-300 words):\n   a) Develop a novel mathematical framework for representing {t['musical_element']}.\n   b) Explain how your system encodes musical information into mathematical structures.\n   c) Provide examples of how common musical patterns would be represented in your system.\n   d) Discuss how your system compares to existing mathematical models of music.\n\n2. Analysis Techniques (200-250 words):\n   a) Describe methods for analyzing musical structures using your mathematical representation.\n   b) Explain how these techniques could reveal patterns or properties not easily discernible in traditional musical notation.\n   c) Provide an example analysis of a simple musical phrase or pattern.\n\n3. Cognitive Process Modeling (250-300 words):\n   a) Explain how your mathematical system could be used to model the cognitive process of {t['cognitive_process']} in music perception.\n   b) Describe the key components of your cognitive model and how they interact.\n   c) Discuss how your model accounts for individual differences in musical perception and processing.\n\n4. Creative Applications (200-250 words):\n   a) Propose a method for using your mathematical system to generate novel musical ideas.\n   b) Explain how this generative process relates to human creativity in music composition.\n   c) Provide an example of a musical idea generated by your system and explain its novelty.\n\n5. Experimental Design (150-200 words):\n   a) Propose an experiment to test a hypothesis derived from your mathematical and cognitive models.\n   b) Describe the methodology, including participant selection, stimuli, and data collection.\n   c) Explain how the results could validate or refine your models.\n\n6. Implications and Future Directions (150-200 words):\n   a) Discuss the potential implications of your work for music theory, cognitive science, and AI in music.\n   b) Address any limitations of your approach and suggest areas for future research.\n   c) Speculate on how your system might be extended to other aspects of music or cognition.\n\nEnsure your response demonstrates a deep understanding of music theory, mathematics, and cognitive science. Be innovative in your approach while maintaining scientific plausibility. Use appropriate terminology from all relevant fields and provide clear explanations for complex concepts.\n\nFormat your answer with clear headings for each section, numbered as above. Your total response should be between 1200-1500 words."

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response includes a novel and coherent mathematical system for representing {t['musical_element']}",
            f"The cognitive model effectively explores {t['cognitive_process']} in music perception",
            "The proposed experimental design is well-structured and relevant to the models presented",
            "The response demonstrates a deep understanding of music theory, mathematics, and cognitive science",
            "The ideas presented are innovative while maintaining scientific plausibility"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
