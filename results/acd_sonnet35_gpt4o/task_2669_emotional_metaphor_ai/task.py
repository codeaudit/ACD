import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        emotions = [
            "joy",
            "sorrow",
            "anger",
            "fear",
            "love",
            "disgust",
            "surprise"
        ]
        cultures = [
            "Japanese",
            "Maori",
            "Egyptian",
            "Inuit",
            "Brazilian"
        ]
        metaphor_types = [
            "nature-based",
            "body-based",
            "object-based",
            "abstract concept-based"
        ]
        poetic_forms = [
            "haiku",
            "sonnet",
            "free verse",
            "tanka"
        ]
        tasks = {
            "1": {
                "emotion": random.choice(emotions),
                "source_culture": random.choice(cultures),
                "target_culture": random.choice(cultures),
                "metaphor_type": random.choice(metaphor_types),
                "poetic_form": random.choice(poetic_forms)
            },
            "2": {
                "emotion": random.choice(emotions),
                "source_culture": random.choice(cultures),
                "target_culture": random.choice(cultures),
                "metaphor_type": random.choice(metaphor_types),
                "poetic_form": random.choice(poetic_forms)
            }
        }
        return tasks

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system capable of generating, interpreting, and translating complex emotional metaphors across different cultures and languages, then use it to analyze and create emotionally resonant poetry. Focus on the emotion of {t['emotion']}, translating from {t['source_culture']} culture to {t['target_culture']} culture, using {t['metaphor_type']} metaphors and the {t['poetic_form']} poetic form.

Your response should include the following sections:

1. System Architecture (250-300 words):
   a) Describe the key components of your AI system for emotional metaphor processing.
   b) Explain how your system integrates emotional understanding, cultural knowledge, and linguistic creativity.
   c) Discuss any novel techniques or algorithms used in your model.

2. Metaphor Generation and Interpretation (200-250 words):
   a) Explain how your system generates {t['metaphor_type']} metaphors for {t['emotion']} in the context of {t['source_culture']} culture.
   b) Describe the process of interpreting these metaphors, considering cultural and emotional nuances.
   c) Provide an example metaphor generated by your system and its interpretation.

3. Cross-Cultural Translation (200-250 words):
   a) Detail how your system translates the emotional metaphor from {t['source_culture']} to {t['target_culture']} culture.
   b) Discuss challenges in preserving emotional resonance across cultures and how your system addresses them.
   c) Provide an example of a translated metaphor, explaining any adjustments made for cultural context.

4. Poetry Analysis and Generation (250-300 words):
   a) Explain how your system analyzes existing poetry for emotional metaphors.
   b) Describe the process of generating emotionally resonant poetry using your system.
   c) Provide a {t['poetic_form']} generated by your system that expresses {t['emotion']} using {t['metaphor_type']} metaphors appropriate for {t['target_culture']} culture. Include a brief explanation of how it adheres to the {t['poetic_form']} structure.

5. Evaluation and Ethical Considerations (150-200 words):
   a) Propose methods for evaluating the effectiveness and cultural sensitivity of your system.
   b) Discuss potential biases in your system and how to mitigate them.
   c) Address ethical implications of AI-generated emotional content and cultural translations.

6. Future Applications and Research Directions (150-200 words):
   a) Suggest potential applications of your system in fields such as cross-cultural communication, mental health, or creative writing.
   b) Propose future research directions to enhance emotional AI and metaphor processing.

Ensure your response demonstrates a deep understanding of emotional intelligence, cultural anthropology, linguistics, and AI. Use appropriate technical terminology and provide clear explanations for complex concepts. Be creative and innovative while maintaining scientific plausibility.

Format your response with clear headings for each section, numbered as above. Use subheadings (a, b, c) where applicable. Your total response should be between 1200-1500 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response includes a well-designed AI system architecture for emotional metaphor processing",
            f"The system successfully generates and interprets {t['metaphor_type']} metaphors for {t['emotion']} in the context of {t['source_culture']} culture",
            f"The cross-cultural translation from {t['source_culture']} to {t['target_culture']} is well-explained and considers cultural nuances",
            "The poetry analysis and generation process is clearly described and demonstrated",
            f"The generated {t['poetic_form']} effectively expresses {t['emotion']} using {t['metaphor_type']} metaphors appropriate for {t['target_culture']} culture",
            f"The generated {t['poetic_form']} adheres to the correct poetic structure",
            "The response addresses evaluation methods, ethical considerations, and potential biases",
            "Future applications and research directions are thoughtfully proposed",
            "The response demonstrates interdisciplinary knowledge of emotional intelligence, cultural anthropology, linguistics, and AI",
            "The proposed system is innovative while maintaining scientific plausibility",
            "The response follows the specified format and word count guidelines"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
