import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        base_words = ['quantum', 'entangle', 'superposition', 'observe', 'collapse', 'wave', 'particle', 'state', 'measure', 'interact', 'decoherence', 'qubit']
        return {
            "1": {"mode": "generate", "base_words": base_words},
            "2": {"mode": "analyze", "base_words": base_words}
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        if t['mode'] == 'generate':
            return f"""Design a quantum-inspired language model that generates entangled text pairs incorporating decoherence. You have 20 minutes to complete this task. Your response should include:

1. Model Design (250-300 words):
   a) Explain how your model incorporates quantum entanglement and decoherence principles.
   b) Describe the process of generating entangled text pairs.
   c) Discuss how your model ensures the quantum-like properties of the generated text.

2. Text Generation (200-250 words):
   a) Using your model, generate a pair of entangled texts using the base words: {', '.join(t['base_words'])}.
   b) Explain how the generated texts exhibit quantum-like entanglement and decoherence properties.

3. Quantum Linguistic Properties (200-250 words):
   a) Identify and explain at least three quantum-inspired properties in your generated texts.
   b) Discuss how these properties parallel quantum phenomena.

4. Potential Applications (150-200 words):
   a) Propose an innovative application for your quantum-inspired language model in cryptography or secure communication.
   b) Explain how this application could advance both natural language processing and quantum computing.

5. Quantitative Analysis (150-200 words):
   a) Propose a method to quantify the degree of entanglement in your generated text pairs.
   b) Provide a hypothetical calculation demonstrating this method.

6. Experimental Validation (200-250 words):
   a) Design a real-world experiment that could validate your quantum-linguistic model.
   b) Explain how this experiment could differentiate between quantum-inspired linguistic phenomena and classical linguistic effects.

Format your response as follows:
[Model Design]
[Text Generation]
[Quantum Linguistic Properties]
[Potential Applications]
[Quantitative Analysis]
[Experimental Validation]

Ensure your response demonstrates a deep understanding of both quantum mechanics principles and natural language processing. Be creative in your approach while maintaining scientific plausibility."""
        else:
            return f"""Analyze a pair of quantum-entangled texts generated by a quantum-inspired language model incorporating decoherence. You have 20 minutes to complete this task. Your response should include:

1. Text Pair Analysis (250-300 words):
   a) Examine the given pair of entangled texts: 
      Text A: "The quantum wave function decohered, entangling qubits in a superposition of collapsing states."
      Text B: "The semantic network fragmented, interweaving meanings in a multiplicity of decaying interpretations."
   b) Identify and explain the quantum-inspired properties exhibited in these texts, including decoherence.
   c) Discuss how the texts mirror quantum entanglement and decoherence principles.

2. Quantum Linguistic Interpretation (200-250 words):
   a) Propose a method to 'measure' or 'observe' these entangled texts in a way that mimics quantum measurement.
   b) Explain how your measurement method might 'collapse' the textual superposition and induce decoherence.

3. Information Theory Connection (200-250 words):
   a) Discuss potential implications of quantum-entangled texts with decoherence for information theory.
   b) Explore how this concept might influence our understanding of language evolution and meaning decay.

4. Challenges and Limitations (150-200 words):
   a) Identify potential challenges in applying quantum decoherence principles to language.
   b) Discuss any limitations of the quantum-linguistic analogy, particularly regarding decoherence.

5. Quantitative Assessment (150-200 words):
   a) Propose a mathematical formula to quantify the degree of entanglement and decoherence in the given text pair.
   b) Provide a hypothetical calculation using your formula and interpret the results.

6. Experimental Design (200-250 words):
   a) Propose a real-world experiment that could test the validity of the quantum-linguistic analogy in this context.
   b) Explain how your experiment could distinguish between quantum-inspired linguistic phenomena and classical linguistic effects.

Format your response as follows:
[Text Pair Analysis]
[Quantum Linguistic Interpretation]
[Information Theory Connection]
[Challenges and Limitations]
[Quantitative Assessment]
[Experimental Design]

Ensure your analysis demonstrates a deep understanding of both quantum mechanics principles and linguistic analysis. Be creative in your approach while maintaining scientific rigor."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response demonstrates a clear and accurate understanding of quantum entanglement and decoherence principles.",
            "The approach to quantum-inspired language modeling is creative, scientifically plausible, and properly incorporates decoherence.",
            "The analysis or generation of entangled texts shows depth of thought and sophisticated interdisciplinary application.",
            "The proposed applications or implications are innovative, well-reasoned, and demonstrate potential real-world impact.",
            "The quantitative analysis or assessment is logically sound, properly explained, and mathematically consistent.",
            "The experimental validation or design is feasible, well-thought-out, and capable of providing meaningful results.",
            "The response follows the specified format and addresses all required components within the given time constraint."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
