import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        scenarios = [
            {
                'context': 'Climate change summit',
                'stakeholders': ['Developed nation', 'Developing nation', 'Environmental NGO'],
                'emotional_stakes': ['National pride', 'Economic anxiety', 'Ecological urgency'],
                'key_phrases': ['carbon neutrality', 'economic impact', 'global responsibility']
            },
            {
                'context': 'Nuclear disarmament talks',
                'stakeholders': ['Nuclear power', 'Non-nuclear state', 'International mediator'],
                'emotional_stakes': ['Security fears', 'Global influence', 'Peace aspirations'],
                'key_phrases': ['deterrence', 'non-proliferation', 'mutual trust']
            }
        ]
        return {str(i+1): scenario for i, scenario in enumerate(scenarios)}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system that generates and interprets emotionally-charged language in high-stakes decision-making scenarios, then apply it to a complex diplomatic negotiation in the context of a {t['context']}. Your task involves the following steps:

1. AI System Design (300-350 words):
   a) Describe the key components of your AI system for generating and interpreting emotionally-charged language.
   b) Explain how your system integrates knowledge from linguistics, psychology, and diplomatic studies.
   c) Detail how the system accounts for cultural differences in emotional expression and interpretation.
   d) Discuss any novel algorithms or approaches used in your system.

2. Emotional Language Analysis (250-300 words):
   a) Explain how your system detects and quantifies emotional content in language.
   b) Describe how it interprets the underlying intentions and motivations behind emotional expressions.
   c) Discuss how the system handles ambiguity and context-dependence in emotional language.

3. Strategic Language Generation (250-300 words):
   a) Describe how your system generates emotionally-charged language to achieve specific diplomatic goals.
   b) Explain how it balances emotional appeal with logical argumentation.
   c) Discuss how the system adapts its language to different cultural and personal emotional styles.

4. Negotiation Simulation (300-350 words):
   Apply your AI system to simulate a negotiation in the {t['context']} scenario.
   a) Describe the initial positions and emotional states of the stakeholders: {', '.join(t['stakeholders'])}.
   b) Provide a sample dialogue (150-200 words) generated by your system, showcasing emotionally-charged language from at least two stakeholders. Include at least two of the following key phrases: {', '.join(t['key_phrases'])}.
   c) Analyze how the emotional dynamics influence the negotiation process and outcomes.

5. Ethical Implications (200-250 words):
   a) Discuss the ethical considerations of using AI to generate emotionally-charged language in diplomatic contexts.
   b) Address potential risks of manipulation or escalation.
   c) Propose guidelines for the responsible use of such systems in international negotiations.

6. Evaluation and Limitations (200-250 words):
   a) Suggest methods to evaluate the effectiveness and accuracy of your system in real-world scenarios.
   b) Discuss the limitations of your approach and potential areas for improvement.
   c) Consider how human negotiators might interact with or be assisted by such an AI system.

Ensure your response demonstrates a deep understanding of emotional intelligence, linguistic nuances, and diplomatic strategies. Be creative in your approach while maintaining plausibility and addressing real-world complexities. Use clear headings for each section and number your paragraphs within each section.

Your total response should be between 1500-1800 words. Include a word count at the end of your response."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The AI system design demonstrates a comprehensive integration of linguistics, psychology, and diplomatic studies, with clear explanations of novel algorithms or approaches.",
            "The emotional language analysis component shows a sophisticated understanding of emotional content detection and interpretation, including handling of ambiguity and context-dependence.",
            "The strategic language generation approach effectively balances emotional appeal with logical argumentation and adapts to different cultural contexts.",
            f"The negotiation simulation provides a realistic and nuanced application of the AI system, incorporating at least two of the key phrases: {', '.join(t['key_phrases'])}.",
            "The sample dialogue (150-200 words) showcases emotionally-charged language from at least two stakeholders and demonstrates the system's ability to generate contextually appropriate responses.",
            "The response addresses ethical implications thoughtfully and proposes specific, actionable guidelines for responsible use in international negotiations.",
            "The evaluation methods are concrete and applicable to real-world scenarios, and the limitations discussion demonstrates critical thinking about potential improvements.",
            "The overall response shows creativity, interdisciplinary knowledge integration, and a deep understanding of emotional intelligence in diplomatic contexts.",
            "The response adheres to the specified word count (1500-1800 words) and includes a word count at the end."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
