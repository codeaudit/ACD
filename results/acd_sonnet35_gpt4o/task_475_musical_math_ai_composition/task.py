import random
import math

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        mathematical_concepts = [
            {
                'concept': 'Fibonacci sequence',
                'description': 'A sequence where each number is the sum of the two preceding ones'
            },
            {
                'concept': 'Golden ratio',
                'description': 'A special number approximately equal to 1.618, often found in nature and art'
            }
        ]
        
        musical_elements = [
            {
                'element': 'Melody',
                'description': 'The main sequence of notes in a piece of music'
            },
            {
                'element': 'Harmony',
                'description': 'The combination of simultaneously sounded musical notes to produce chords'
            }
        ]
        
        tasks = [
            {
                'math_concept': random.choice(mathematical_concepts),
                'musical_element': musical_elements[0]
            },
            {
                'math_concept': random.choice(mathematical_concepts),
                'musical_element': musical_elements[1]
            }
        ]
        
        return {str(i+1): task for i, task in enumerate(tasks)}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a music generation algorithm that uses the mathematical concept of {t['math_concept']['concept']} to create {t['musical_element']['element'].lower()}. Your task has the following parts:

1. Algorithm Design (250-300 words):
   a) Explain how you would use {t['math_concept']['concept']} to generate {t['musical_element']['element'].lower()}.
   b) Describe the step-by-step process your algorithm would follow.
   c) Discuss how your algorithm ensures musical coherence and aesthetic appeal.

2. Mathematical Foundation (200-250 words):
   a) Provide a brief explanation of {t['math_concept']['concept']} and its properties.
   b) Describe how these properties are mapped to musical parameters in your algorithm.
   c) Include at least one mathematical formula or equation relevant to your algorithm.

3. Music Theory Integration (200-250 words):
   a) Explain how your algorithm incorporates fundamental music theory principles.
   b) Discuss any potential conflicts between the mathematical approach and traditional music theory, and how you resolve them.

4. Implementation Considerations (150-200 words):
   a) Describe the data structures and programming concepts you would use to implement this algorithm.
   b) Discuss any potential performance considerations or optimizations.

5. Output Analysis (200-250 words):
   a) Describe the expected characteristics of the music generated by your algorithm.
   b) Discuss how these characteristics relate to both {t['math_concept']['concept']} and {t['musical_element']['element'].lower()}.
   c) Propose a method for evaluating the quality and uniqueness of the generated music.

6. Creative Applications (150-200 words):
   a) Suggest two novel applications or extensions of your algorithm in the field of AI-generated music or algorithmic composition.
   b) Briefly explain how these applications could contribute to the field of computational creativity.

Ensure your response demonstrates a deep understanding of both the mathematical concept and the musical element, as well as creative problem-solving in combining these domains. Use appropriate terminology from mathematics, music theory, and computer science. Your total response should be between 1150-1450 words.
"""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response demonstrates a deep understanding of {t['math_concept']['concept']} and its application to generating {t['musical_element']['element'].lower()}.",
            "The algorithm design is coherent, creative, and grounded in both mathematical and musical principles.",
            "The explanation includes relevant mathematical formulas and music theory concepts.",
            "The implementation considerations and output analysis are thoughtful and well-reasoned.",
            "The proposed creative applications are innovative and well-explained."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
