import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        cognitive_processes = [
            {
                "name": "Decision Making",
                "description": "The cognitive process of selecting a logical choice from the available options."
            },
            {
                "name": "Memory Consolidation",
                "description": "The process of stabilizing a memory trace after the initial acquisition."
            }
        ]
        return {str(i+1): process for i, process in enumerate(cognitive_processes)}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system that translates brain activity into musical compositions, then use it to create a piece of music representing the cognitive process of {t['name']}. Your system must incorporate a deep learning model, specifically a recurrent neural network (RNN), for processing temporal aspects of brain activity. Your response should include:

1. Neuro-Musical AI System Design (300-350 words):
   a) Describe the key components of your AI system for translating brain activity to music.
   b) Explain how your system integrates neuroscience, music theory, and AI algorithms, focusing on the role of the RNN.
   c) Detail how the system captures and interprets brain activity data.
   d) Include a simple diagram or flowchart illustrating your system's architecture.

2. Brain-Music Mapping (250-300 words):
   a) Explain your approach to mapping specific brain activities to musical elements.
   b) Discuss how you ensure the musical output is both scientifically representative and aesthetically pleasing.
   c) Provide an example of how a particular neural pattern would be translated into a musical phrase.

3. Cognitive Process Sonification (250-300 words):
   a) Describe how your system would represent the {t['name']} process in musical form.
   b) Explain the choice of musical elements (e.g., rhythm, harmony, timbre) used to convey different aspects of this cognitive process.
   c) Discuss any challenges in accurately representing this process through music and how you addressed them.

4. AI Composition Process (200-250 words):
   a) Outline the steps your AI system takes to generate a complete musical piece.
   b) Explain how the system ensures musical coherence while accurately representing the cognitive process.
   c) Discuss any novel compositional techniques your AI employs.

5. Sample Composition Description (250-300 words):
   Present a detailed description of a short musical piece (2-3 minutes) generated by your AI system that represents {t['name']}. Include:
   a) The overall structure and progression of the piece.
   b) Specific musical elements and how they relate to aspects of the cognitive process.
   c) How the composition reflects the dynamics and complexity of {t['name']}.

6. Potential Applications and Implications (200-250 words):
   a) Discuss potential applications of your neuro-symphonic AI system in fields such as neuroscience research, music therapy, or artistic expression.
   b) Analyze the implications of translating cognitive processes into music for our understanding of both the brain and music.
   c) Address any ethical considerations or potential misuses of this technology.

7. Limitations and Future Work (200-250 words):
   a) Discuss the current limitations of your neuro-symphonic AI system.
   b) Propose potential solutions or areas for future research to address these limitations.
   c) Speculate on how advancements in neuroscience or AI might impact the development of such systems in the future.

Ensure your response demonstrates a deep understanding of neuroscience, music theory, and AI technologies. Be innovative in your approach while maintaining scientific and artistic plausibility. Use appropriate terminology from all relevant fields and provide explanations where necessary.

Format your response with clear headings for each section. Your total response should be between 1650-2000 words. Include a word count at the end of your response."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response demonstrates a clear understanding of the {t['name']} process and how it can be represented musically",
            "The AI system design is innovative, coherent, and correctly incorporates an RNN for processing temporal aspects of brain activity",
            "The brain-music mapping approach is well-explained and scientifically grounded",
            "The sample composition description effectively illustrates how the cognitive process is represented through music",
            "The response addresses potential applications, implications, and ethical considerations of the technology",
            "The limitations of the system are thoughtfully discussed with plausible suggestions for future improvements",
            "The response is within the specified word count range (1650-2000 words)"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
