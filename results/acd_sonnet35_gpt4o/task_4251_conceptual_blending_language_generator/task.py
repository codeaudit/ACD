import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        concepts = [
            {
                "domain1": "Time",
                "domain2": "Money",
                "target_blend": "Financial Planning",
                "example_blend": "Time is a limited resource that can be invested or wasted"
            },
            {
                "domain1": "Love",
                "domain2": "Journey",
                "target_blend": "Relationship Development",
                "example_blend": "Relationships have milestones and can encounter obstacles"
            },
            {
                "domain1": "Ideas",
                "domain2": "Food",
                "target_blend": "Intellectual Nourishment",
                "example_blend": "Complex ideas can be digested and provide mental sustenance"
            }
        ]
        return {str(i+1): concept for i, concept in enumerate(random.sample(concepts, 2))}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a conceptual blending system that generates novel metaphors and expressions by combining the domains of {t['domain1']} and {t['domain2']}, with a focus on the target blend of {t['target_blend']}. Your response should include:

1. Conceptual Blending System Design (250-300 words):
   a) Describe the key components of your conceptual blending system.
   b) Explain how your system represents and processes information from the two input domains.
   c) Detail the mechanism for generating blended concepts and expressions.
   d) Discuss any novel techniques or approaches used in your design.
   e) Provide a visual representation of your system using ASCII art or Unicode characters (max 20 lines by 80 characters).

2. Cognitive Linguistic Analysis (200-250 words):
   a) Analyze the cognitive linguistic principles underlying your system's approach to conceptual blending.
   b) Explain how your system accounts for the embodied nature of conceptual metaphors.
   c) Discuss any challenges in computationally modeling human-like conceptual blending.
   d) Compare and contrast your system's approach with the example blend provided: "{t['example_blend']}"

3. Generated Expressions (200-250 words):
   a) Present at least three novel expressions or metaphors generated by your system, blending {t['domain1']} and {t['domain2']} in the context of {t['target_blend']}.
   b) Explain the blending process and reasoning behind each generated expression.
   c) Analyze the cognitive implications and potential impact of these novel expressions.
   d) Discuss how your generated expressions differ from or build upon the example blend provided.

4. Evaluation and Refinement (150-200 words):
   a) Propose methods for evaluating the quality, novelty, and cognitive plausibility of the generated expressions.
   b) Describe how you would refine and improve your system based on these evaluations.
   c) Discuss potential biases or limitations in your approach and how you might address them.

5. Implications and Applications (150-200 words):
   a) Discuss the potential implications of your system for our understanding of human cognition and creativity.
   b) Explore possible applications in fields such as education, artificial intelligence, or creative writing.
   c) Consider any ethical considerations or potential misuses of such a system.

Ensure your response demonstrates a deep understanding of conceptual blending theory, cognitive linguistics, and computational creativity. Use appropriate technical terminology and provide clear explanations for complex concepts. Be creative in your approach while maintaining scientific plausibility.

Format your response with clear headings for each section, numbered as above. Your total response should be between 950-1200 words. Stay within the specified word count for each section.

For the visual representation in section 1, use ASCII art or Unicode characters to create a clear and informative diagram of your conceptual blending system. The diagram should be no larger than 20 lines by 80 characters."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response must design a conceptual blending system for the given domains and target blend",
            "The system design should be coherent, demonstrate understanding of conceptual blending theory, and include a clear visual representation",
            "The generated expressions should be novel, relevant to the input domains and target blend, and distinct from the provided example",
            "The cognitive linguistic analysis should be insightful, well-reasoned, and compare the system's approach with the provided example blend",
            "The response should demonstrate interdisciplinary reasoning, creative problem-solving, and adhere to the specified format and word counts"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0