class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        return {
            "1": {
                "emotion": "joy",
                "mathematical_model": "fractal-based",
                "musical_style": "classical"
            },
            "2": {
                "emotion": "melancholy",
                "mathematical_model": "wave interference",
                "musical_style": "jazz"
            }
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a system that generates musical compositions based on mathematical models of human emotions, then analyze the emotional impact of the generated music. Focus on the emotion of {t['emotion']} using a {t['mathematical_model']} approach within the {t['musical_style']} style. Your response should include:

1. Emotion-Mathematics Mapping (250-300 words):
   a) Describe how you mathematically model the emotion of {t['emotion']}.
   b) Explain how your {t['mathematical_model']} approach captures the nuances of this emotion.
   c) Discuss how this mathematical representation translates into musical parameters (e.g., tempo, pitch, rhythm).

2. Music Generation System (300-350 words):
   a) Detail the architecture of your music generation system.
   b) Explain how it integrates the mathematical emotion model with {t['musical_style']} composition principles.
   c) Describe the algorithms used to create coherent musical structures.
   d) Include a high-level diagram or pseudocode of your system's workflow.

3. Sample Composition Analysis (250-300 words):
   a) Provide a detailed description of a short musical piece generated by your system.
   b) Analyze how the mathematical model influences specific elements of the composition.
   c) Explain how the piece reflects both the target emotion and the chosen musical style.

4. Emotional Impact Evaluation (200-250 words):
   a) Propose a method to assess the emotional impact of the generated music on listeners.
   b) Discuss potential challenges in measuring emotional responses to computer-generated music.
   c) Suggest how your system could be refined based on listener feedback.

5. Interdisciplinary Implications (150-200 words):
   a) Discuss how your system contributes to our understanding of the relationship between mathematics, music, and emotion.
   b) Explore potential applications in fields such as music therapy, AI-assisted composition, or emotion-responsive technologies.

6. Ethical Considerations and Limitations (150-200 words):
   a) Address ethical implications of using AI to generate emotion-targeted music.
   b) Discuss limitations of your approach and potential biases in emotional modeling or musical style representation.
   c) Propose guidelines for responsible development and use of emotion-based music generation systems.

Ensure your response demonstrates a deep understanding of music theory, mathematical modeling, and emotional psychology. Use appropriate terminology from each field and provide clear explanations for complex concepts. Be creative in your approach while maintaining scientific plausibility.

Format your response with clear headings for each section, numbered as above. Your total response should be between 1300-1600 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            "The response demonstrates a deep understanding of music theory, mathematical modeling, and emotional psychology.",
            "The proposed system effectively integrates the mathematical model of emotion with music generation principles.",
            "The sample composition analysis clearly shows how the emotion and musical style are reflected in the generated piece.",
            "The emotional impact evaluation method is well-thought-out and addresses potential challenges.",
            "The response discusses interdisciplinary implications and ethical considerations thoroughly."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
