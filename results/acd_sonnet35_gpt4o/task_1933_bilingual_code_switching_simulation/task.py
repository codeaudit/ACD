import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        language_pairs = [
            {
                'languages': ['Spanish', 'English'],
                'domain': 'casual conversation'
            },
            {
                'languages': ['Mandarin', 'English'],
                'domain': 'academic discussion'
            }
        ]
        return {str(i+1): pair for i, pair in enumerate(random.sample(language_pairs, 2))}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system that simulates bilingual code-switching behavior between {t['languages'][0]} and {t['languages'][1]} in the context of {t['domain']}. Then, use this system to investigate cognitive and linguistic phenomena associated with multilingualism. Your response should include:

1. System Architecture (300-350 words):
   a) Describe the key components of your AI system for simulating code-switching.
   b) Explain how your system models the cognitive processes involved in bilingual language production.
   c) Detail any novel techniques or algorithms used in your model.
   d) Discuss how your system handles the specific challenges of code-switching between {t['languages'][0]} and {t['languages'][1]}.

2. Code-Switching Mechanism (250-300 words):
   a) Explain the specific mechanisms used to trigger and execute code-switches in your model.
   b) Describe how your system determines appropriate switch points in {t['domain']}.
   c) Discuss how your model accounts for different types of code-switching (e.g., intersentential, intrasentential).
   d) Provide an example of how your system would generate a code-switched utterance, including both {t['languages'][0]} and {t['languages'][1]}.

3. Linguistic and Cognitive Modeling (200-250 words):
   a) Describe how your system models the linguistic features of both {t['languages'][0]} and {t['languages'][1]}.
   b) Explain how your model simulates the cognitive load associated with code-switching.
   c) Discuss any assumptions or simplifications made in your model regarding bilingual language processing.

4. Experimental Design (250-300 words):
   Propose an experiment using your AI system to investigate a specific aspect of bilingual cognition or linguistics. Include:
   a) A clear research question related to code-switching or bilingualism.
   b) The methodology for using your AI system to explore this question.
   c) Expected results and their potential implications for our understanding of bilingualism.
   d) Potential limitations of using an AI model for this type of research.

5. Comparative Analysis (200-250 words):
   a) Compare your AI code-switching model to human bilingual behavior in {t['domain']}.
   b) Discuss similarities and differences between your model's output and natural code-switching patterns.
   c) Analyze what these comparisons might reveal about both human cognition and AI language capabilities.

6. Ethical Considerations and Future Directions (150-200 words):
   a) Discuss any ethical implications of simulating bilingual cognitive processes.
   b) Explore potential applications of your system in fields such as education, translation, or cognitive therapy.
   c) Propose two future research directions that could build upon your code-switching AI model.

Ensure your response demonstrates a deep understanding of linguistics, cognitive science, and artificial intelligence. Use appropriate technical terminology and provide clear explanations for complex concepts. Be innovative in your approach while maintaining scientific plausibility.

Format your response with clear headings for each section and use subheadings where appropriate. Your total response should be between 1350-1650 words. Include a word count at the end of your response.

Note: Provide a brief example (2-3 sentences) of code-switched output generated by your system in section 2d, demonstrating a mix of {t['languages'][0]} and {t['languages'][1]} in the context of {t['domain']}."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response demonstrates a deep understanding of bilingual code-switching between {t['languages'][0]} and {t['languages'][1]}, with a plausible example provided.",
            "The AI system design is innovative, scientifically plausible, and thoroughly explained with clear architectural components.",
            f"The proposed experiment is well-designed, relevant to bilingualism research, and specifically addresses code-switching in the context of {t['domain']}.",
            "The comparative analysis provides insightful observations about human cognition and AI capabilities, highlighting both similarities and differences.",
            "Ethical considerations and future directions are thoughtfully addressed, with clear potential applications and research proposals.",
            "The response adheres to the specified word count and formatting requirements."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
