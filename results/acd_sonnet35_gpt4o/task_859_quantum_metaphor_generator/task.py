import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        metaphor_types = [
            "Visual metaphors",
            "Auditory metaphors",
            "Kinesthetic metaphors",
            "Emotional metaphors",
            "Abstract concept metaphors"
        ]
        quantum_concepts = [
            "Superposition",
            "Entanglement",
            "Quantum tunneling",
            "Quantum interference",
            "Quantum teleportation"
        ]
        sample_metaphors = [
            "Life is a rollercoaster",
            "Time is a river",
            "Knowledge is light",
            "Love is a battlefield",
            "The mind is a garden"
        ]
        tasks = {
            "1": {
                "metaphor_type": random.choice(metaphor_types),
                "quantum_concept": random.choice(quantum_concepts),
                "sample_metaphor": random.choice(sample_metaphors)
            },
            "2": {
                "metaphor_type": random.choice(metaphor_types),
                "quantum_concept": random.choice(quantum_concepts),
                "sample_metaphor": random.choice(sample_metaphors)
            }
        }
        return tasks

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a quantum computing algorithm for analyzing and generating metaphors in natural language, focusing on {t['metaphor_type']} and incorporating the quantum concept of {t['quantum_concept']}. Use the sample metaphor "{t['sample_metaphor']}" as a starting point for your analysis. Your response should include the following sections:

1. Quantum Algorithm Design (300-350 words):
   a) Describe the overall structure and key components of your quantum algorithm.
   b) Explain how you incorporate {t['quantum_concept']} into your algorithm design.
   c) Detail how your algorithm processes and generates {t['metaphor_type']}.
   d) Include a high-level quantum circuit diagram or pseudocode snippet illustrating a key part of your algorithm.

2. Linguistic Model Integration (250-300 words):
   a) Explain how your quantum algorithm interfaces with classical natural language processing models.
   b) Describe the method for encoding linguistic structures into quantum states.
   c) Discuss how your algorithm handles the complexity and ambiguity inherent in metaphorical language.

3. Metaphor Analysis and Generation Process (250-300 words):
   a) Provide a step-by-step explanation of how your algorithm analyzes the sample metaphor "{t['sample_metaphor']}".
   b) Describe the process by which your algorithm generates novel {t['metaphor_type']}.
   c) Explain how the quantum nature of your algorithm enhances metaphor processing compared to classical approaches.

4. Example Output (150-200 words):
   a) Provide an example of a novel metaphor generated by your algorithm.
   b) Explain the quantum operations that led to this output.
   c) Analyze the metaphor's linguistic and semantic properties.

5. Theoretical Advantages and Limitations (200-250 words):
   a) Discuss the theoretical speedup or improvements offered by your quantum approach.
   b) Identify potential limitations or challenges in implementing your algorithm on current or near-term quantum hardware.
   c) Propose potential solutions or areas for future research to address these limitations.

6. Interdisciplinary Implications (150-200 words):
   a) Explore how your quantum metaphor algorithm might impact fields such as cognitive science, artificial intelligence, or literary analysis.
   b) Discuss potential applications of your algorithm beyond metaphor generation.

Ensure your response demonstrates a deep understanding of quantum computing principles, linguistic theories, and creative language use. Be innovative in your approach while maintaining scientific and theoretical plausibility. Use appropriate terminology from both quantum physics and linguistics throughout your answer.

Format your response with clear headings for each section. Your total response should be between 1300-1600 words."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response includes a comprehensive quantum algorithm design that incorporates {t['quantum_concept']} and addresses {t['metaphor_type']}",
            "The linguistic model integration is well-explained and plausible",
            "The metaphor analysis and generation process is clearly described and leverages quantum principles",
            f"The sample metaphor \"{t['sample_metaphor']}\" is analyzed using the proposed algorithm",
            "An example output of a novel metaphor is provided with a clear explanation of the quantum operations involved",
            "The theoretical advantages and limitations are thoughtfully discussed, including potential speedups and hardware challenges",
            "The interdisciplinary implications are explored in depth, covering at least two fields beyond quantum computing and linguistics",
            "The response demonstrates a deep understanding of both quantum computing and linguistics, using appropriate terminology from both fields",
            "The proposed algorithm is innovative while remaining scientifically plausible",
            "The response is well-structured with clear headings for each section and falls within the specified word count (1300-1600 words)"
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
