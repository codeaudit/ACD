import random
import string

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        musical_structures = ['sonata', 'rondo', 'fugue', 'theme and variations']
        mathematical_sequences = ['Fibonacci', 'prime numbers', 'Pascal\'s triangle', 'geometric progression']
        poetic_forms = ['sonnet', 'haiku', 'villanelle', 'free verse']
        
        def generate_task():
            return {
                'musical_structure': random.choice(musical_structures),
                'mathematical_sequence': random.choice(mathematical_sequences),
                'poetic_form': random.choice(poetic_forms),
                'theme': ''.join(random.choices(string.ascii_lowercase, k=5))  # Random 5-letter word as theme
            }
        
        return {
            "1": generate_task(),
            "2": generate_task()
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a system that generates poetry based on musical structures and mathematical sequences, then use it to compose a poem. Your task has the following components:

1. System Design (250-300 words):
   a) Create a system that integrates the musical structure of a {t['musical_structure']}, the mathematical sequence of {t['mathematical_sequence']}, and the poetic form of a {t['poetic_form']}.
   b) Explain how each element (musical, mathematical, and poetic) influences the others in your system.
   c) Describe how your system would generate poetry, including any rules or constraints.

2. Composition Process (200-250 words):
   a) Outline the step-by-step process of composing a poem using your system.
   b) Explain how the musical structure guides the overall form of the poem.
   c) Describe how the mathematical sequence influences word choice, line length, or other poetic elements.

3. Poem Composition:
   Using your designed system, compose a {t['poetic_form']} on the theme of \"{t['theme']}\". Your poem should clearly reflect the influence of the {t['musical_structure']} structure and the {t['mathematical_sequence']} sequence.

4. Analysis (200-250 words):
   a) Analyze your composed poem, explaining how it embodies the principles of your system.
   b) Discuss how the integration of music, mathematics, and poetry enhances or constrains the creative process.
   c) Reflect on any unexpected emergent properties or patterns in your composition.

5. Evaluation Criteria (100-150 words):
   Propose criteria for evaluating poems generated by your system, considering mathematical accuracy, musical structure adherence, and poetic quality.

Ensure your response demonstrates a deep understanding of music theory, mathematical sequences, and poetic forms. Use technical terminology appropriately and provide explanations where necessary. Be creative in your approach while maintaining logical consistency within your designed system."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The response must include a system design that integrates a {t['musical_structure']} structure, {t['mathematical_sequence']} sequence, and {t['poetic_form']} form.",
            "The composition process must be clearly explained, showing how musical and mathematical elements influence the poetry.",
            f"A {t['poetic_form']} must be composed on the theme of '{t['theme']}', reflecting the designed system's principles.",
            "An analysis of the composed poem must be provided, discussing how it embodies the system's principles.",
            "Evaluation criteria for poems generated by the system must be proposed."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
