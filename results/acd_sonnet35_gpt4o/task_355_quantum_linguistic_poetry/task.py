import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        quantum_principles = [
            'superposition',
            'entanglement',
            'quantum tunneling',
            'wave-particle duality',
            'quantum decoherence'
        ]
        poetic_forms = [
            'sonnet',
            'haiku',
            'free verse',
            'villanelle',
            'concrete poetry'
        ]
        tasks = [
            {
                'principle': random.choice(quantum_principles),
                'form': random.choice(poetic_forms)
            },
            {
                'principle': random.choice(quantum_principles),
                'form': random.choice(poetic_forms)
            }
        ]
        return {str(i+1): task for i, task in enumerate(tasks)}

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design a quantum-inspired language model and use it to generate poetry that reflects quantum principles. Focus on the quantum principle of {t['principle']} and use the poetic form of {t['form']}. Complete the following steps:

1. Quantum Language Model Design (250-300 words):
   a) Describe the key features of your quantum-inspired language model.
   b) Explain how it incorporates the principle of {t['principle']}.
   c) Discuss how this model differs from classical language models.
   d) Provide a simple example of how your model would represent or process a word or phrase.

2. Quantum Poetry Generation (200-250 words):
   a) Explain how your quantum language model would approach generating a {t['form']} poem.
   b) Describe the steps or algorithms involved in the generation process.
   c) Discuss how the quantum principle of {t['principle']} influences the poetic output.

3. Sample Poem:
   Generate a {t['form']} poem using your quantum-inspired language model that reflects the principle of {t['principle']}. Adhere to the following form requirements:
   - Sonnet: 14 lines, iambic pentameter, with a rhyme scheme of your choice (e.g., ABAB CDCD EFEF GG)
   - Haiku: 3 lines with 5-7-5 syllable structure
   - Free verse: At least 10 lines with no fixed rhyme or meter
   - Villanelle: 19 lines with 5 tercets and a quatrain, following the ABA rhyme scheme
   - Concrete poetry: Shape the poem visually to reflect the quantum principle

4. Poetic Analysis (150-200 words):
   a) Explain how your generated poem reflects the quantum principle of {t['principle']}.
   b) Discuss any emergent properties or unexpected features in the poem that arise from the quantum-inspired approach.
   c) Compare how this poem might differ from one generated by a classical language model.

5. Potential Applications (100-150 words):
   a) Propose two potential applications of your quantum-inspired language model beyond poetry generation.
   b) Briefly explain how each application could benefit from the quantum approach.

6. Limitations and Future Directions (100-150 words):
   a) Discuss potential limitations of your quantum-inspired language model.
   b) Suggest areas for future research or improvement.

Ensure your response demonstrates a deep understanding of both quantum computing principles and linguistic concepts. Be creative in your approach while maintaining scientific plausibility. Use appropriate technical terminology and provide clear explanations for complex ideas.

Format your response with clear headings for each section and number your paragraphs within each section. Include the word count for each section in parentheses at the end of the section.

Example of quantum principle application in language processing:
For the principle of superposition, a quantum-inspired language model might represent words as quantum states, allowing for multiple meanings or connotations to exist simultaneously until the context 'collapses' the word into a specific meaning.

Note: This example is provided for illustrative purposes only. Your model should be original and distinct from this example."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The quantum language model design incorporates the principle of {t['principle']} in a scientifically plausible and original way, distinct from the provided example.",
            f"The poetry generation process clearly reflects the influence of the {t['principle']} principle and is well-explained.",
            f"The sample poem adheres to the {t['form']} structure and demonstrates quantum-inspired elements that are clearly related to {t['principle']}.",
            "The poetic analysis provides insightful connections between the poem and quantum principles, highlighting emergent properties.",
            "The proposed applications of the quantum-inspired language model are innovative, well-reasoned, and distinct from traditional NLP applications.",
            "The response demonstrates a deep understanding of both quantum computing and linguistics throughout, using appropriate technical terminology.",
            "The response adheres to the specified word count limits and formatting requirements for each section."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
