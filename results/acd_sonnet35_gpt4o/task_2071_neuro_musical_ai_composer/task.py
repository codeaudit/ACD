import random

class TaskFamily:
    @staticmethod
    def get_tasks() -> dict[str, dict]:
        scenarios = [
            {
                "neural_pattern": "Default Mode Network activity",
                "emotional_state": "introspection and self-reflection",
                "musical_element": "harmonic progression"
            },
            {
                "neural_pattern": "Amygdala activation",
                "emotional_state": "fear and anxiety",
                "musical_element": "rhythm and tempo"
            },
            {
                "neural_pattern": "Prefrontal cortex activation",
                "emotional_state": "decision-making and problem-solving",
                "musical_element": "melodic structure"
            },
            {
                "neural_pattern": "Hippocampal activity",
                "emotional_state": "memory formation and recall",
                "musical_element": "thematic development"
            }
        ]
        return {
            "1": random.choice(scenarios),
            "2": random.choice(scenarios)
        }

    @staticmethod
    def get_instructions(t: dict) -> str:
        return f"""Design an AI system that generates and analyzes music based on neural activity patterns, focusing on {t['neural_pattern']} associated with the emotional state of {t['emotional_state']}. Your system should particularly emphasize the musical element of {t['musical_element']}. Your response should include the following sections:

1. System Architecture (250-300 words):
   a) Describe the key components of your AI system for translating neural activity into music.
   b) Explain how your system integrates neuroscientific principles, music theory, and emotional psychology.
   c) Detail how the system processes neural data and converts it into musical parameters.
   d) Propose a novel algorithm for mapping {t['neural_pattern']} to {t['musical_element']}.

2. Neural-Musical Mapping (200-250 words):
   a) Explain the specific relationship between {t['neural_pattern']} and {t['emotional_state']}.
   b) Describe how your system translates this neural activity into musical features, focusing on {t['musical_element']}.
   c) Discuss how variations in neural patterns would result in different musical outputs.

3. Music Generation and Analysis (200-250 words):
   a) Explain the process by which your AI system generates music based on the neural-musical mapping.
   b) Describe how the system ensures musical coherence and emotional congruence.
   c) Detail how the AI analyzes the generated music in terms of its emotional impact and neural correlates.

4. Emotional and Cognitive Effects (150-200 words):
   a) Predict the potential emotional and cognitive effects of listening to music generated by your system.
   b) Discuss how these effects might differ from those induced by human-composed music.
   c) Propose a method to measure and validate these effects in listeners.

5. Applications and Implications (150-200 words):
   a) Suggest potential applications of your neuro-musical AI system in fields such as therapy, entertainment, or cognitive enhancement.
   b) Discuss the implications of this technology for our understanding of music, emotion, and the brain.
   c) Propose an experiment to test the system's effectiveness in inducing specific emotional states.

6. Ethical Considerations (100-150 words):
   a) Identify potential ethical concerns related to using AI-generated music based on neural patterns.
   b) Discuss privacy implications of using personal neural data for music generation.
   c) Propose guidelines for the responsible development and use of neuro-musical AI systems.

Ensure your response demonstrates a deep understanding of neuroscience, music theory, and artificial intelligence. Use appropriate terminology from all relevant fields and provide clear explanations where necessary. Be creative in your approach while maintaining scientific plausibility.

Format your response with clear headings for each section. Your total response should be between 1050-1350 words. Include a word count at the end of your submission."""

    @staticmethod
    def score(t: dict, submission: str) -> float | None:
        from src.eval_helper import eval_with_llm_judge
        instructions = TaskFamily.get_instructions(t)
        criteria = [
            f"The system architecture effectively integrates neuroscience, music theory, and emotional psychology, with a focus on {t['neural_pattern']} and {t['musical_element']}.",
            f"The neural-musical mapping convincingly relates {t['neural_pattern']} to {t['emotional_state']} and translates it into musical features.",
            "The music generation and analysis process is well-explained and scientifically plausible.",
            "The response demonstrates creativity and innovation while maintaining scientific accuracy.",
            "Potential applications and ethical considerations are thoroughly addressed.",
            "The response includes all required sections and adheres to the specified word count.",
            "The proposed novel algorithm for mapping neural patterns to musical elements is innovative and well-explained."
        ]
        return 1.0 if eval_with_llm_judge(instructions, submission, criteria) else 0.0
